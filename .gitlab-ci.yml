stages:
  - compile
  - test
  - build
  - buildServices
  - deployServices


variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  # no certificates used

image: docker:latest
services:
  - docker:dind

build-fastapi-apps:
  stage: buildServices
  script:
    - echo "Logging into acrbanditgamesplatform..."
    - docker login -u $IMAGE_USERNAME -p $IMAGE_PASSWORD acrbanditgamesplatform.azurecr.io
#    - echo "Building game recommender image..."
#    - cd infrastructure/game-recommender-api && docker build -t game-recommender-api:latest .
#    - docker tag game-recommender-api:latest acrbanditgamesplatform.azurecr.io/game-recommender-api:latest
#    - echo "Pushing game recommender image to ACR..."
#    - docker push acrbanditgamesplatform.azurecr.io/game-recommender-api:latest
#    - echo "Successfully pushed game recommender api image!"
    - echo "Building chatbot image..."
    - cd infrastructure/chatbot-api && docker build -t chatbot-api:latest .
    - docker tag chatbot-api:latest acrbanditgamesplatform.azurecr.io/chatbot-api:latest
    - echo "Pushing chatbot image to ACR..."
    - docker push acrbanditgamesplatform.azurecr.io/chatbot-api:latest
    - echo "Successfully pushed chatbot api image!"
    - echo "Building prediction API image..."
    - cd ../prediction-api && docker build -t prediction-api:latest .
    - docker tag prediction-api:latest acrbanditgamesplatform.azurecr.io/prediction-api:latest
    - echo "Pushing prediction API image to ACR..."
    - docker push acrbanditgamesplatform.azurecr.io/prediction-api:latest
    - echo "Successfully pushed prediction api image!"
  artifacts:
    paths:
      - infrastructure/chatbot-api/Dockerfile
      - infrastructure/prediction-api/Dockerfile
  only:
    - main

deploy-fastapi-apps:
  stage: deployServices
  image: mcr.microsoft.com/azure-cli
  before_script:
    - echo "Logging in as service principal $AZURE_APP_ID"
    - az login --service-principal -u $AZURE_APP_ID -p $AZURE_PASSWORD --tenant $AZURE_TENANT
    - echo "Logging into ACR"
  script:
#    - echo "Starting game recommender webapp..."
#    - az webapp up --resource-group BanditGames--name game-recommender-api-app --runtime "PYTHON:3.11" --docker-image acrbanditgamesplatform.azurecr.io/game-recommender-api:latest
#    - echo "Successfully created game recommender webapp"
#    - export GAME_RECOMMENDER_API_URL=$(az webapp show --name game-recommender-api-app --resource-group BanditGames --query 'defaultHostName' -o tsv)
#    - echo "Game recommender URL $GAME_RECOMMENDER_API_URL"
    - echo "Deploying chatbot api..."
    - STATE=$(az containerapp show --name chatbot-api-ca --resource-group BanditGames --query "properties.provisioningState" -o tsv || echo "NotFound")
    - if [ "$STATE" = "InProgress" ]; then
      echo "Chatbot API is currently being provisioned. Waiting...";
      sleep 30;
      exit 1;
      elif [ "$STATE" = "NotFound" ]; then
      echo "Chatbot API not found. Proceeding with creation...";
      else
      echo "Chatbot API is ready for deployment.";
      fi
    - az containerapp up --name chatbot-api-ca 
      --resource-group BanditGames 
      --location westeurope 
      --target-port 8000 
      --ingress external 
      --image "acrbanditgamesplatform.azurecr.io/chatbot-api:latest"  
      --environment "/subscriptions/8b2ab0c8-52c8-4906-8b85-c40ab946e6ff/resourceGroups/Battleship/providers/Microsoft.App/containerAppEnvironments/battleship-env"
    - az containerapp update --name chatbot-api-ca --resource-group BanditGames --cpu 4 --memory 8Gi --min-replicas 1 --max-replicas 4
    - export CHATBOT_API_URL=$(az containerapp show --name chatbot-api-ca --resource-group BanditGames --query "properties.configuration.ingress.fqdn" -o tsv)
    - echo "Successfully deployed chatbot at $CHATBOT_API_URL"
    - echo "Deploying prediction api..."
    - az containerapp up --name prediction-api-ca
      --resource-group BanditGames
      --location westeurope
      --target-port 8000
      --ingress external
      --image "acrbanditgamesplatform.azurecr.io/prediction-api:latest"
      --environment "/subscriptions/8b2ab0c8-52c8-4906-8b85-c40ab946e6ff/resourceGroups/Battleship/providers/Microsoft.App/containerAppEnvironments/battleship-env"
    - az containerapp update --name prediction-api-ca --resource-group BanditGames --min-replicas 1 --max-replicas 4
    - export PREDICTION_API_URL=$(az containerapp show --name prediction-api-ca --resource-group BanditGames --query "properties.configuration.ingress.fqdn" -o tsv)
    - echo "Successfully deployed chatbot at PREDICTION_API_URL"
  only:
    - main





# security testing: https://docs.gitlab.com/ee/user/application_security/
# According to gitlab doc, this is the way to go.. so let's do this!
include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

cache:
  key: "$CI_COMMIT_REF_NAME"
  policy: push
  paths:
    - build
    - .gradle


compile:
  image: gradle:8.11.0-jdk21
  stage: compile
  script:
    - gradle compileJava


test:
  image: gradle:8.11.0-jdk21
  stage: test
  script:
    - gradle test
  artifacts:
    when: always
    reports:
      junit: "*/**/build/test-results/test/**/TEST-*.xml"

build:
  image: gradle:8.11.0-jdk21
  stage: build
  script:
    - gradle clean bootBuildImage --stacktrace
  only:
    - main

# no nice github integration